# Choose a name for docker-compose project. This should be unique and readable.
# New containers and networks will use this as name prefix.
COMPOSE_PROJECT_NAME=shop

# User and group ID for docker processes.
# Should be the same as for user who is currently logged in.
# You can check your users' ID and GID by calling:
#
# id -u #(for UID)
# id -g #(for GID)
UID=1000
GID=1000

# The PHP version that is going to be used in a Docker image build.
# If you change PHP version in already used environment, remember to call:
#
# docker-compose build
#
# Use only the code number such as 7.3, 7.4 or 5.6
PHP_VERSION=7.1

# Point to magento installation directory. It can be empty if you want to initialize new project.
# The path can be either full (/home/user/magento) and relative (../magento)
# The variable is mandatory and the directory has to exist before you run the environment
MAGENTO_PATH=~/Projects/magento

# Setup your host configuration
#
# The value may contain a number or binding address. Examples:
# HTTP_EXTERNAL_PORT=8080 # bind to loopback on port 8080
# HTTP_EXTERNAL_PORT=0.0.0.0:80 # bind to all interfaces on port 80
#
# Note that port 58080 is used internally so can't be used here
HTTP_EXTERNAL_PORT=80

# MySQL database details used on initialisation
# If you want to change those on already used project, remember to remove storage/mysql directory
# Remember that the hostname of database server (accessible from app and all other containers) is "db".
MYSQL_ROOT_PASSWORD=secret
MYSQL_USER=shop
MYSQL_PASSWORD=secret
MYSQL_DATABASE=shop

# If you want to save MySQL data files in your local directory, uncomment the following line
# This option is only reliable on Linux.
# On Windows it won't work, on MacOS it may cause performance issues.
#MYSQL_USER_DIRECTORY=./storage/mysql

# You can pass credentials to Composer using one of the following method:
# - Using environment variable
# - Using EXISTING auth.json file
#
COMPOSER_AUTH={"http-basic":{"repo.magento.com":{"username":"PUBLIC_KEY","password":"PRIVATE_KEY"}}}
#COMPOSER_AUTH_FILE=~/.composer/auth.json

# Uncomment if you want Composer to automatically run on when the `app` container is starting.
#COMPOSER_INSTALL_ON_BOOT=true

# Override paths that will be mounted inside the app container if you want to put them somwhere else
# Uncomment and modify those only when required - it's highly recommended that you'll leave them commented
#SSH_DIRECTORY=~/.ssh
#NPM_DIRECTORY=~/.npm
#COMPOSER_CACHE_DIRECTORY=~/.composer/cache

# If you want to use Magento 1.x, uncomment the following line
#MAGENTO_1_MODE=true

# Depending on your environment you may need to set custom remote_host for XDebug
# If you run the environment on Linux or MacOS (using official Docker App), XDebug should work out of the box.
# However if you're for example using custom virtual machine, you will need to pass the actual host address
# so XDebug could know where to connect.
#
#XDEBUG_REMOTE_HOST=192.168.12.34

# If you want the web server to be proxied through a different service like Varnish use the
# following option and point the target URL.
#PROXY_THROUGH=http://varnish

# App container can send e-mails using sendmail command through external SMTP server of choice.
# Configuration won't be set unless SENDMAIL_SMTP_HOST value is defined.
#
# If you want to use mailcatcher from docker-compose.custom.yml.example, it should be enough to just
# uncomment first two lines.
#
# SENDMAIL_SMTP_AUTH and SENDMAIL_SMTP_TLS variables take only 'on' and 'off' values.
#SENDMAIL_SMTP_HOST=mailcatcher
#SENDMAIL_SMTP_PORT=1025
#SENDMAIL_SMTP_AUTH_ENABLED=off
#SENDMAIL_SMTP_TLS_ENABLED=off
#SENDMAIL_SMTP_USER=user
#SENDMAIL_SMTP_PASSWORD=secret
#SENDMAIL_SMTP_FROM=magento@internal.app
