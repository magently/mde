# Choose a name for docker-compose project. This should be unique and readable.
# New containers and networks will use this as name prefix.
COMPOSE_PROJECT_NAME=shop

# User and group ID for docker processes.
# Should be the same as for user who is currently logged in.
# You can check your users' ID and GID by calling respectively:
#
# id -u
# id -g
UID=1000
GID=1000

# The PHP version that is going to be used in a Docker image build.
# If you change PHP version in already used environment, remember to call:
#
# docker-compose build
#
# Use only the code number such as 7.3, 7.4 or 5.6
PHP_VERSION=7.1
MAGENTO_PATH=~/Magently/magently-shop
HTTP_EXTERNAL_PORT=80

# Use one of methods to provide credentials into Composer.
# Default method requires you to have your keys in ~/.composer/auth.json file.
# Alternatively you can pass Json with credentials into COMPOSER_AUTH variable
#
# WARNING! If you use auth.json method, make sure the file exists. Otherwise Docker will create it
# with root ownership!
#
# WARNING! You always need to provide a file for COMPOSER_AUTH_FILE. If you don't want to use one
# pass the /dev/null path instead!
#COMPOSER_AUTH=
COMPOSER_AUTH_FILE=~/.composer/auth.json
COMPOSER_INSTALL_ON_BOOT=true

# MySQL database details used on initialisation
# If you want to change those on already used project, remember to remove storage/mysql directory
MYSQL_ROOT_PASSWORD=secret
MYSQL_USER=shop
MYSQL_PASSWORD=secret
MYSQL_DATABASE=shop

# PHPMyAdmin settings
PHPMYADMIN_EXTERNAL_PORT=8336

# This makes NGINX proxy speaking to Varnish container instead of directly to itself to Magento vhost
# Basically this is required in order to run Varnish for full page cache testing.
# Keep in mind that changing the value does not run Varnish server itself!
#
# Use `true` or `false` values respectively.
VARNISH_ENABLED=false
